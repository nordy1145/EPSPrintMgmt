@model EPSPrintMgmt.Models.AddEPSandENTPrinterClass

@{
    ViewBag.Title = "Add EPS and Enterprise Printer";
}

<h2>Add EPS and Enterprise Printer</h2>

@using (Html.BeginForm("CreateEPSAndEnterprisePrinterJSON", "Printer", FormMethod.Post, new { encType = "multipart/form-data", id = "myform", name = "myform" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <p>This page allows you to create an EPS and  Enterprise print queue at the same time.</p>
        <p>The page may continue to load for a few minutes.  Please give it some time to finish.</p>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.DeviceID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DeviceID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DeviceID, "", new { @class = "text-danger" })
                </div>
            </div>
        <section>
            <p><h3>EPS Print Queue Configuration</h3></p>

            @if (ViewData["EPSuseIP"].ToString() == "True")
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.PortName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PortName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PortName, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                <input type="hidden" id="PortName" name="PortName" />
            }

            @if (ViewData["EPSuseTrays"].ToString() == "True")
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.Tray, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("Tray", new SelectList((System.Collections.IEnumerable)ViewData["EPSgetTrays"]), "-- Select Printer Tray --")
                        @*@Html.EditorFor(model => model.Tray, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.Tray, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                <input type="hidden" id="Tray" name="Tray" />
            }
            @if (ViewData["EPSuseGold"].ToString() == "True")
            {
                <p>Source Printer and Copy Printer Device Settings checkbox can be left blank/untouched if there is not a printer you'd like to copy from.  These are not required fields.</p>
                            <p>Please make sure the Source Printer's driver is the same as the Driver Name.</p>
                <div class="form-group">
                    @Html.LabelFor(model => model.SourcePrinter, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("SourcePrinter", new SelectList((System.Collections.IEnumerable)ViewData["EPSgetGold"]), "-- Select Source EPS Print Queue --")
                        @*@Html.EditorFor(model => model.Tray, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.SourcePrinter, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                <input type="hidden" id="SourcePrinter" name="SourcePrinter" />
            }
            @*<div class="form-group">
            @Html.LabelFor(model => model.DriverName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DriverName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DriverName, "", new { @class = "text-danger" })
            </div>
        </div>*@
            @if (ViewData["cloneDevSettings"].ToString() == "True")
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.cloneDevSettings, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.CheckBoxFor(model => model.cloneDevSettings)
                        @*@Html.DropDownList("SourcePrinter", new SelectList((System.Collections.IEnumerable)ViewData["getGold"]), "-- Select Source EPS Print Queue --")*@
                        @*@Html.EditorFor(model => model.Tray, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.cloneDevSettings, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                @Html.HiddenFor(model => model.cloneDevSettings)
                @*<input type="hidden" id="cloneDevSettings" name="cloneDevSettings" />*@
            }

            <div class="form-group">
                @Html.LabelFor(model => model.DriverName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("DriverName", new SelectList((System.Collections.IEnumerable)ViewData["EPSprintDrivers"]))
                    @Html.ValidationMessageFor(model => model.DriverName, "", new { @class = "text-danger" })
                </div>
            </div>
        
        </section>
        <section>
            <p><h3>Enterprise Print Queue Configuration</h3> </p>

            @if (ViewData["ENTuseIP"].ToString() == "True")
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.ENTPortName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ENTPortName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ENTPortName, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                <input type="hidden" id="ENTPortName" name="ENTPortName" />
            }

            @if (ViewData["ENTuseTrays"].ToString() == "True")
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.ENTTray, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("Tray", new SelectList((System.Collections.IEnumerable)ViewData["ENTgetTrays"]), "-- Select Printer Tray --")
                        @*@Html.EditorFor(model => model.Tray, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.ENTTray, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                <input type="hidden" id="ENTTray" name="ENTTray" />
            }

            @if (ViewData["ENTuseGold"].ToString() == "True")
            {
                <p>Source Printer and Copy Printer Device Settings checkbox can be left blank/untouched if there is not a printer you'd like to copy from.  These are not required fields.</p>
                            <p>Please make sure the Source Printer's driver is the same as the Driver Name.</p>
                <div class="form-group">
                    @Html.LabelFor(model => model.ENTSourcePrinter, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("SourcePrinter", new SelectList((System.Collections.IEnumerable)ViewData["ENTgetGold"]), "-- Select Source Print Queue --")
                        @*@Html.EditorFor(model => model.Tray, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.ENTSourcePrinter, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                <input type="hidden" id="ENTSourcePrinter" name="ENTSourcePrinter" />
            }
            @*<div class="form-group">
            @Html.LabelFor(model => model.DriverName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DriverName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DriverName, "", new { @class = "text-danger" })
            </div>
        </div>*@
            @if (ViewData["ENTcloneDevSettings"].ToString() == "True")
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.cloneENTDevSettings, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.CheckBoxFor(model => model.cloneENTDevSettings)
                        @*@Html.DropDownList("SourcePrinter", new SelectList((System.Collections.IEnumerable)ViewData["getGold"]), "-- Select Source EPS Print Queue --")*@
                        @*@Html.EditorFor(model => model.Tray, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.cloneENTDevSettings, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                @Html.HiddenFor(model => model.cloneENTDevSettings)
                @*<input type="hidden" id="cloneDevSettings" name="cloneDevSettings" />*@
            }


            @*<div class="form-group">
            @Html.LabelFor(model => model.DriverName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DriverName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DriverName, "", new { @class = "text-danger" })
            </div>
        </div>*@

            <div class="form-group">
                @Html.LabelFor(model => model.ENTDriverName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("ENTDriverName", new SelectList((System.Collections.IEnumerable)ViewData["ENTprintDrivers"]))
                    @Html.ValidationMessageFor(model => model.ENTDriverName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.PrintServer, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("PrintServer", new SelectList((System.Collections.IEnumerable)ViewData["ENTgetEntServers"]))
                    @Html.ValidationMessageFor(model => model.PrintServer, "", new { @class = "text-danger" })
                </div>
            </div>
        </section>
       
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<div id="divProcessing">
    <p>Processing, please wait . . . <img src="@Url.Content("~/Content/ajax-loader.gif")"></p>
</div>
<div id="divResult">

</div>
@section Scripts {
    @*@Scripts.Render("~/bundles/jqueryval")*@
    <script type="text/javascript">

        $(document).ready(function () {

            // Hide the "busy" Gif at load:
            $("#divProcessing").hide();
            $("#divResult").text("");

            $("#myform").on("submit", function (event) {
                event.preventDefault();

                // Show the "busy" Gif:
                $("#divProcessing").show();
                $("#divResult").text("");
                var EPSUseIP = "@ViewData["EPSuseIP"]";

                if (EPSUseIP == "False")
                {
                    document.getElementById("PortName").value = document.getElementById("DeviceID").value;
                }
                var ENTUseIP = "@ViewData["ENTuseIP"]";

                if (ENTUseIP == "False")
                {
                    document.getElementById("ENTPortName").value = document.getElementById("DeviceID").value;
                }
                var url = $(this).attr("action");
                var formData = $(this).serialize();
                $.ajax({
                    url: url,
                    type: "POST",
                    data: formData,
                    dataType: "json",
                    success: function (resp) {

                        // Hide the "busy" gif:
                        $("#divProcessing").hide();
                        for (var i = 0; i < resp.length; i++) {
                            var mess = resp[i];
                            $("<h3>"+mess+"</h3>").appendTo("#divResult");
                        }

                    }
                })
            });
        });
    </script>
}
